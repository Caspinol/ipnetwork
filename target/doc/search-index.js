var searchIndex = {};
searchIndex["ipnetwork"] = {"doc":"","items":[[3,"Ipv4Network","ipnetwork","",null,null],[3,"Ipv6Network","","",null,null],[4,"IpNetworkError","","",null,null],[13,"InvalidAddr","","",0,null],[13,"InvalidPrefix","","",0,null],[13,"InvalidCidrFormat","","",0,null],[4,"IpNetwork","","",null,null],[13,"V4","","",1,null],[13,"V6","","",1,null],[5,"ipv4_mask_to_prefix","","Converts a `Ipv4Addr` network mask into a prefix.\nIf the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.",null,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"result"}}],[5,"ipv6_mask_to_prefix","","Converts a `Ipv6Addr` network mask into a prefix.\nIf the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.",null,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"result"}}],[5,"ip_mask_to_prefix","","Converts a `IpAddr` network mask into a prefix.\nIf the mask is invalid this will return an `IpNetworkError::InvalidPrefix`.",null,{"inputs":[{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"new","","Constructs a new `Ipv4Network` from any `Ipv4Addr` and a prefix denoting the network size.\nIf the prefix is larger than 32 this will return an `IpNetworkError::InvalidPrefix`.",2,{"inputs":[{"name":"ipv4addr"},{"name":"u8"}],"output":{"name":"result"}}],[11,"from_cidr","","Creates an `Ipv4Network` from parsing a string in CIDR notation.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over `Ipv4Network`. Each call to `next` will return the next\n`Ipv4Addr` in the given network. `None` will be returned when there are no more\naddresses.",2,null],[11,"ip","","",2,null],[11,"prefix","","",2,null],[11,"mask","","Returns the mask for this `Ipv4Network`.\nThat means the `prefix` most significant bits will be 1 and the rest 0",2,null],[11,"network","","Returns the address of the network denoted by this `Ipv4Network`.\nThis means the lowest possible IPv4 address inside of the network.",2,null],[11,"broadcast","","Returns the broadcasting address of this `Ipv4Network`.\nThis means the highest possible IPv4 address inside of the network.",2,null],[11,"contains","","Checks if a given `Ipv4Addr` is in this `Ipv4Network`",2,null],[11,"size","","Returns number of possible host addresses in this `Ipv4Network`.",2,null],[11,"nth","","Returns the `n`:th address within this network.\nThe adresses are indexed from 0 and `n` must be smaller than the size of the network.",2,null],[11,"fmt","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"hash","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"new","","Constructs a new `Ipv6Network` from any `Ipv6Addr` and a prefix denoting the network size.\nIf the prefix is larger than 128 this will return an `IpNetworkError::InvalidPrefix`.",3,{"inputs":[{"name":"ipv6addr"},{"name":"u8"}],"output":{"name":"result"}}],[11,"from_cidr","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"ip","","",3,null],[11,"prefix","","",3,null],[11,"mask","","Returns the mask for this `Ipv6Network`.\nThat means the `prefix` most significant bits will be 1 and the rest 0",3,null],[11,"contains","","Checks if a given `Ipv6Addr` is in this `Ipv6Network`",3,null],[11,"fmt","","",3,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","",1,{"inputs":[{"name":"ipaddr"},{"name":"u8"}],"output":{"name":"result"}}],[11,"ip","","",1,null],[11,"prefix","","",1,null]],"paths":[[4,"IpNetworkError"],[4,"IpNetwork"],[3,"Ipv4Network"],[3,"Ipv6Network"]]};
initSearch(searchIndex);
